// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZAlpha.Infrastructure.Persistence;

#nullable disable

namespace ZAlpha.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240129120829_update-transaction-status-seeding")]
    partial class updatetransactionstatusseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.AnswersForEntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntranceTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("EntranceTestId");

                    b.ToTable("AnswersForEntranceTests");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReplyCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplyCommentId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65191898-080f-4c24-b39a-653e57323400"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(679),
                            Description = "Nội dung comment",
                            IsDeleted = false,
                            PostId = new Guid("14b76851-0f86-4dd2-a59c-ae45893c9578")
                        },
                        new
                        {
                            Id = new Guid("cca90e51-b859-4830-8fcf-989163aaa4d9"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(683),
                            Description = "Em chỉ đang cảm thấy mệt mỏi, quá tải và cần sẻ chia thôi. Anh luôn ở đây hỗ trợ em, bản chất em có những suy nghĩ trên đã là một điểm tích cực, là điều đáng quý. Hãy bắt đầu từ việc viết lại mục đích, lý do chọn lựa con đường của em, để lấy nó làm điểm tựa mỗi khi đối diện với cảm xúc khó chịu mà em đề cập. Còn nếu được hãy tham gia một buổi hẹn ngắn với anh nếu em vẫn cảm thấy struggle",
                            IsDeleted = false,
                            PostId = new Guid("14b76851-0f86-4dd2-a59c-ae45893c9578")
                        },
                        new
                        {
                            Id = new Guid("981c2b78-2662-4929-ab07-75e36d58e9bb"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(686),
                            Description = "Nội dung comment test",
                            IsDeleted = false,
                            PostId = new Guid("f2c5a3b4-8885-4673-8bcc-3702dbbae15d")
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntranceTests");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.InteractWithComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InteractCommentStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("InteractWithComments");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.InteractWithPosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InteractPostStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("InteractWithPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61291732-1599-46e4-93e2-01aa8fca3801"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(716),
                            InteractPostStatus = 0,
                            IsDeleted = false,
                            PostId = new Guid("14b76851-0f86-4dd2-a59c-ae45893c9578"),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("795154a3-aa8a-4337-8f45-35529a400fd3"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(723),
                            InteractPostStatus = 0,
                            IsDeleted = false,
                            PostId = new Guid("f2c5a3b4-8885-4673-8bcc-3702dbbae15d"),
                            UserAccountId = "424ab531-d60a-487e-9625-a74a7f5747be"
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.ManagerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ManagerAccounts");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Pack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackInfomation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PackPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Packs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e5b48df-713e-4fe3-844b-8258c785ff7e"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(749),
                            IsDeleted = false,
                            PackInfomation = "Giới hạn lượt đăng bài và tương tác",
                            PackName = "Dùng thử",
                            PackPrice = 0.0
                        },
                        new
                        {
                            Id = new Guid("e609e43f-b6ad-468e-91d1-785b282d345b"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(752),
                            IsDeleted = false,
                            PackInfomation = "30 ngày",
                            PackName = "Tháng",
                            PackPrice = 49000.0
                        },
                        new
                        {
                            Id = new Guid("92b2fb8c-866c-445b-87b4-dc7bb3c828ac"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(755),
                            IsDeleted = false,
                            PackInfomation = "3 tháng, tương đương 90 ngày",
                            PackName = "Quý",
                            PackPrice = 129000.0
                        },
                        new
                        {
                            Id = new Guid("8853faf2-87f1-4c17-8e20-7253720265be"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(759),
                            IsDeleted = false,
                            PackInfomation = "tương đương 365 ngày",
                            PackName = "Năm",
                            PackPrice = 499000.0
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PackDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("PackDetail");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ce9944f-8958-48bd-9e20-5ec5b7b283e9"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(783),
                            IsDeleted = false,
                            PackId = new Guid("8e5b48df-713e-4fe3-844b-8258c785ff7e"),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("85ff8767-adac-4dfa-a49a-18c20d071c09"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(788),
                            EndDay = new DateTime(2024, 1, 29, 8, 30, 56, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PackId = new Guid("e609e43f-b6ad-468e-91d1-785b282d345b"),
                            StartDay = new DateTime(2024, 1, 27, 8, 30, 56, 0, DateTimeKind.Unspecified),
                            UserAccountId = "424ab531-d60a-487e-9625-a74a7f5747be"
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94422c85-1d58-4f47-b5cb-a2794e757268"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(969),
                            IsDeleted = false,
                            PaymentMethodName = "VNPay",
                            PaymentMethodStatus = 1
                        },
                        new
                        {
                            Id = new Guid("d49773a8-6f63-4803-8c46-69f1349a5c20"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(980),
                            IsDeleted = false,
                            PaymentMethodName = "MoMo",
                            PaymentMethodStatus = 0
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnonymousStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmotionalStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostImagesUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14b76851-0f86-4dd2-a59c-ae45893c9578"),
                            AnonymousStatus = 1,
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(541),
                            IsDeleted = false,
                            PostBody = "Nhà em cũng không phải khá giả nên em bỏ học đi làm từ sớm, muốn chạy đi kiếm tiền luôn. Hiện tại là một shipper ngày nào cũng ráng giao cả ngàn đơn, dãi nắng cả buổi, ráng cày thêm đơn để được thưởng KPI. Vậy nên mỗi khi về nhà, ngoài kiệt sức ra em thường xuyên cảm thấy căng thẳng, mệt mỏi và có những suy nghĩ tiêu cực về bản thân, mình cải cha cãi má bỏ học đi làm mà. Em chỉ muốn được nghỉ ngơi nhưng mẹ bảo em xuống làm cơm cho ba má ăn với lo dọn dẹp nhà. Điều này khiến em cảm thấy mệt mỏi và khó chịu.",
                            PostImagesUrl = "https://scontent.fsgn5-10.fna.fbcdn.net/v/t39.30808-6/387798154_632107352457871_5690110333313757656_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=3635dc&_nc_ohc=OpZIs7vdMK8AX9Hgjkq&_nc_ht=scontent.fsgn5-10.fna&oh=00_AfAvpIg3y_s3UEGS0ilM8J6x6spEamFSC3sjhVn3V7G5-A&oe=65A6DF8C",
                            PostTitle = "Nội dung bài đăng test 1"
                        },
                        new
                        {
                            Id = new Guid("f2c5a3b4-8885-4673-8bcc-3702dbbae15d"),
                            AnonymousStatus = 1,
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(587),
                            IsDeleted = false,
                            PostBody = "Nội dung bài đăng test thử ",
                            PostImagesUrl = "https://scontent.fsgn5-10.fna.fbcdn.net/v/t39.30808-6/387798154_632107352457871_5690110333313757656_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=3635dc&_nc_ohc=OpZIs7vdMK8AX9Hgjkq&_nc_ht=scontent.fsgn5-10.fna&oh=00_AfAvpIg3y_s3UEGS0ilM8J6x6spEamFSC3sjhVn3V7G5-A&oe=65A6DF8C",
                            PostTitle = "Nội dung bài đăng test 2"
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("647b2bd5-ea1b-42a6-a92e-8263fb160754"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(646),
                            IsDeleted = false,
                            PostId = new Guid("14b76851-0f86-4dd2-a59c-ae45893c9578"),
                            TagId = new Guid("150b7aba-a76f-40b2-b7e5-19961bda108f")
                        },
                        new
                        {
                            Id = new Guid("5d7deaf1-d72b-457e-bf56-877a89d37fac"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(652),
                            IsDeleted = false,
                            PostId = new Guid("14b76851-0f86-4dd2-a59c-ae45893c9578"),
                            TagId = new Guid("6598d9c2-ef4d-4295-a06a-e45a3cfc7b9d")
                        },
                        new
                        {
                            Id = new Guid("bcc26154-4ca0-4b51-808a-911bb4e09447"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(655),
                            IsDeleted = false,
                            PostId = new Guid("f2c5a3b4-8885-4673-8bcc-3702dbbae15d"),
                            TagId = new Guid("79a50b87-3bb3-4acc-b164-ef5795db17e3")
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PsychologistAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Milestones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Workplace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("PsychologistAccounts");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("150b7aba-a76f-40b2-b7e5-19961bda108f"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(613),
                            IsDeleted = false,
                            TagName = "Học đường"
                        },
                        new
                        {
                            Id = new Guid("2b3a61bf-1543-4e9f-900b-d4901be7e78c"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(617),
                            IsDeleted = false,
                            TagName = "Công việc"
                        },
                        new
                        {
                            Id = new Guid("6598d9c2-ef4d-4295-a06a-e45a3cfc7b9d"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(622),
                            IsDeleted = false,
                            TagName = "Gia đình"
                        },
                        new
                        {
                            Id = new Guid("79a50b87-3bb3-4acc-b164-ef5795db17e3"),
                            Created = new DateTime(2024, 1, 29, 19, 8, 28, 830, DateTimeKind.Local).AddTicks(625),
                            IsDeleted = false,
                            TagName = "Xã hội"
                        });
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TransactionFee")
                        .HasColumnType("float");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.WishListPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("WishListPosts");
                });

            modelBuilder.Entity("ZAlpha.Domain.Identity.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsPremium")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9e4a863-1fbb-4f69-a210-bc76c699fd9d",
                            Email = "vinhtc191@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Trần",
                            LastName = "Vinh",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJy3zCJul9KHCbPBHbaSbsgb9wFameULYiABmfOqOk4dGeF5cqYu9WcHaFm5ZcQ0vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86f85898-4ebd-4271-aff9-cb0eefacfc7f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "vinh",
                            Wallet = 10000000.0
                        },
                        new
                        {
                            Id = "424ab531-d60a-487e-9625-a74a7f5747be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32b87f80-0d10-4f01-b46c-208ac4cd1474",
                            Email = "trieu@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Triệu",
                            LastName = "Gà",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJy3zCJul9KHCbPBHbaSbsgb9wFameULYiABmfOqOk4dGeF5cqYu9WcHaFm5ZcQ0vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa3c507f-42a5-44b5-bfa5-70282584e3e0",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "trieu",
                            Wallet = 1000.0
                        },
                        new
                        {
                            Id = "41d8778f-80e0-4dd5-b7db-86eb1c32d40d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cd02c24-916c-4611-88ab-0a5f8af89d22",
                            Email = "kiet@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kiệt",
                            LastName = "Kiệt",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJy3zCJul9KHCbPBHbaSbsgb9wFameULYiABmfOqOk4dGeF5cqYu9WcHaFm5ZcQ0vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cad872b-8ad4-4d9f-bb91-c7c482f0f0dd",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "kiet",
                            Wallet = 1000.0
                        },
                        new
                        {
                            Id = "a1c48523-eee4-4151-9c82-23ebf8b0f762",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8a347fb-2d80-4fb6-9de3-7246563cf8b4",
                            Email = "kien@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "kiên",
                            LastName = "kiên",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJy3zCJul9KHCbPBHbaSbsgb9wFameULYiABmfOqOk4dGeF5cqYu9WcHaFm5ZcQ0vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f979ed8d-9611-47f0-bc7a-7770f6ad5de9",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "kien",
                            Wallet = 1000.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.AnswersForEntranceTest", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("AnswersForEntranceTests")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Entities.EntranceTest", null)
                        .WithMany("AnswersForEntranceTests")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Entities.Comment", "ReplyComment")
                        .WithMany()
                        .HasForeignKey("ReplyCommentId");

                    b.Navigation("Post");

                    b.Navigation("ReplyComment");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.CustomerAccount", b =>
                {
                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.InteractWithComments", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.Comment", "Comment")
                        .WithMany("InteractWithComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("InteractWithComments")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.InteractWithPosts", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.Post", "Post")
                        .WithMany("InteractWithPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("InteractWithPosts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.ManagerAccount", b =>
                {
                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("ManagerAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PackDetail", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.Pack", "Pack")
                        .WithMany("PackDetails")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("PackDetails")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PsychologistAccount", b =>
                {
                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.WishListPost", b =>
                {
                    b.HasOne("ZAlpha.Domain.Entities.Post", "Post")
                        .WithMany("WishListPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZAlpha.Domain.Identity.UserAccount", "UserAccount")
                        .WithMany("WishListPosts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Comment", b =>
                {
                    b.Navigation("InteractWithComments");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.CustomerAccount", b =>
                {
                    b.Navigation("AnswersForEntranceTests");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.EntranceTest", b =>
                {
                    b.Navigation("AnswersForEntranceTests");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Pack", b =>
                {
                    b.Navigation("PackDetails");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InteractWithPosts");

                    b.Navigation("PostTags");

                    b.Navigation("WishListPosts");
                });

            modelBuilder.Entity("ZAlpha.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ZAlpha.Domain.Identity.UserAccount", b =>
                {
                    b.Navigation("CustomerAccounts");

                    b.Navigation("InteractWithComments");

                    b.Navigation("InteractWithPosts");

                    b.Navigation("ManagerAccounts");

                    b.Navigation("PackDetails");

                    b.Navigation("Transactions");

                    b.Navigation("WishListPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
